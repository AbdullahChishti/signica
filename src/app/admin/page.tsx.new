'use client'

import { useState, useEffect, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { Plus, LogOut, RefreshCw, Loader2 } from 'lucide-react'
import { useAuth } from '@/contexts/AuthContext'
import { getW9Requests, getW9RequestStats } from '@/lib/database'
import type { W9Request } from '@/lib/supabase'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Badge } from '@/components/ui/badge'
import { RequireAuth } from '@/components/AuthGuard'

// Add this to prevent caching
export const dynamic = 'force-dynamic'
export const revalidate = 0
export const fetchCache = 'force-no-store'

type TableCellProps = {
  children: React.ReactNode;
  className?: string;
  colSpan?: number;
};

const TableCellWrapper = ({ children, className = '', colSpan }: TableCellProps) => (
  <TableCell className={className} colSpan={colSpan as number}>
    {children}
  </TableCell>
);

export default function AdminDashboard() {
  const { user, logout, isLoading: isAuthLoading } = useAuth()
  const router = useRouter()
  const [requests, setRequests] = useState<W9Request[]>([])
  const [stats, setStats] = useState({ total: 0, pending: 0, completed: 0, expired: 0 })
  const [loading, setLoading] = useState(true)
  const [refreshing, setRefreshing] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [lastRefresh, setLastRefresh] = useState<Date | null>(null)

  const loadData = useCallback(async (isRefresh = false) => {
    if (!user) return
    
    try {
      if (isRefresh) {
        setRefreshing(true)
      } else {
        setLoading(true)
      }
      setError(null)
      
      // Load requests and stats in parallel
      const [requestsData, statsData] = await Promise.all([
        getW9Requests(user.id),
        getW9RequestStats(user.id)
      ])
      
      setRequests(requestsData)
      setStats(statsData)
      setLastRefresh(new Date())
    } catch (err) {
      console.error('Error loading data:', err)
      setError('Failed to load data. Please try again.')
    } finally {
      setLoading(false)
      setRefreshing(false)
    }
  }, [user])
  
  // Initial data load
  useEffect(() => {
    loadData()
  }, [loadData])
  
  // Handle refresh
  const handleRefresh = () => {
    loadData(true)
  }

  const handleLogout = async () => {
    try {
      // Clear any cached data before logging out
      if (typeof window !== 'undefined') {
        localStorage.removeItem('sb-auth-token')
        sessionStorage.removeItem('sb-auth-token')
        router.refresh()
      }
      
      await logout()
      window.location.href = '/login?logout=true&t=' + Date.now()
    } catch (error) {
      console.error('Error logging out:', error)
      window.location.href = '/login?error=logout_failed&t=' + Date.now()
    }
  }

  if (isAuthLoading || loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-100 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-8 h-8 text-primary animate-spin mx-auto mb-4" />
          <p className="text-muted-foreground">Loading dashboard data...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-100">
      <RequireAuth>
        {/* Header */}
        <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
          <div className="container mx-auto px-6 lg:px-8">
            <div className="flex h-16 items-center justify-between">
              <div className="flex items-center space-x-4">
                <h1 className="text-xl font-bold">Admin Dashboard</h1>
              </div>
              <Button variant="outline" onClick={handleLogout}>
                <LogOut className="mr-2 h-4 w-4" />
                Logout
              </Button>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="container mx-auto px-6 py-8 lg:px-8">
          <div className="space-y-6">
            {/* Stats Cards */}
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">Total Requests</p>
                      <p className="text-2xl font-bold">{stats.total}</p>
                    </div>
                    <div className="rounded-lg bg-primary/10 p-3">
                      <RefreshCw className="h-6 w-6 text-primary" />
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">Completed</p>
                      <p className="text-2xl font-bold">{stats.completed}</p>
                    </div>
                    <div className="rounded-lg bg-green-100 p-3">
                      <CheckCircle2 className="h-6 w-6 text-green-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">Pending</p>
                      <p className="text-2xl font-bold">{stats.pending}</p>
                    </div>
                    <div className="rounded-lg bg-yellow-100 p-3">
                      <Clock className="h-6 w-6 text-yellow-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">Expired</p>
                      <p className="text-2xl font-bold">{stats.expired}</p>
                    </div>
                    <div className="rounded-lg bg-red-100 p-3">
                      <AlertCircle className="h-6 w-6 text-red-600" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Requests Table */}
            <Card>
              <div className="flex items-center justify-between p-6 pb-0">
                <h2 className="text-lg font-semibold">Recent Requests</h2>
                <Button variant="outline" onClick={handleRefresh} disabled={refreshing}>
                  {refreshing ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <RefreshCw className="mr-2 h-4 w-4" />
                  )}
                  Refresh
                </Button>
              </div>
              <CardContent className="p-6">
                {error ? (
                  <div className="rounded-md bg-red-50 p-4">
                    <div className="flex">
                      <div className="flex-shrink-0">
                        <XCircle className="h-5 w-5 text-red-400" />
                      </div>
                      <div className="ml-3">
                        <h3 className="text-sm font-medium text-red-800">Error loading data</h3>
                        <div className="mt-2 text-sm text-red-700">
                          <p>{error}</p>
                        </div>
                        <div className="mt-4">
                          <Button variant="outline" size="sm" onClick={() => loadData(true)}>
                            Try Again
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : requests.length === 0 ? (
                  <div className="flex flex-col items-center justify-center py-12">
                    <div className="rounded-full bg-muted p-4">
                      <FileText className="h-8 w-8 text-muted-foreground" />
                    </div>
                    <h3 className="mt-4 text-lg font-medium">No requests found</h3>
                    <p className="mt-1 text-sm text-muted-foreground">
                      Get started by creating a new request
                    </p>
                    <Button className="mt-4">
                      <Plus className="mr-2 h-4 w-4" />
                      New Request
                    </Button>
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Vendor</TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead>Date</TableHead>
                          <TableHead className="text-right">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {requests.map((request) => (
                          <TableRow key={request.id}>
                            <TableCell className="font-medium">
                              {request.vendor_name || 'N/A'}
                            </TableCell>
                            <TableCell>
                              <Badge
                                variant={
                                  request.status === 'completed'
                                    ? 'success'
                                    : request.status === 'pending'
                                    ? 'warning'
                                    : 'destructive'
                                }
                              >
                                {request.status}
                              </Badge>
                            </TableCell>
                            <TableCell>
                              {new Date(request.created_at).toLocaleDateString()}
                            </TableCell>
                            <TableCell className="text-right">
                              <Button variant="ghost" size="sm" asChild>
                                <Link href={`/admin/requests/${request.id}`}>
                                  View Details
                                </Link>
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </main>
      </RequireAuth>
    </div>
  )
}
