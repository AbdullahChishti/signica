import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import jsPDF from 'jspdf'

// Initialize Supabase with service role key for server-side operations
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!supabaseUrl || !supabaseServiceKey) {
  throw new Error('Missing Supabase environment variables')
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const resolvedParams = await params
    const requestId = resolvedParams.id

    if (!requestId) {
      return NextResponse.json(
        { error: 'Request ID is required' },
        { status: 400 }
      )
    }

    // Fetch the W9 request and form data
    const { data: w9Request, error: requestError } = await supabase
      .from('w9_requests')
      .select(`
        *,
        w9_form_data (*)
      `)
      .eq('id', requestId)
      .single()

    if (requestError || !w9Request) {
      return NextResponse.json(
        { error: 'W-9 request not found' },
        { status: 404 }
      )
    }

    if (w9Request.status !== 'completed') {
      return NextResponse.json(
        { error: 'W-9 form is not completed yet' },
        { status: 400 }
      )
    }

    const formData = w9Request.w9_form_data?.[0]
    if (!formData) {
      return NextResponse.json(
        { error: 'W-9 form data not found' },
        { status: 404 }
      )
    }

    // Generate PDF
    const pdf = new jsPDF()
    
    // Set font
    pdf.setFont('helvetica')
    
    // Header
    pdf.setFontSize(20)
    pdf.setTextColor(40, 40, 40)
    pdf.text('Form W-9', 105, 25, { align: 'center' })
    
    pdf.setFontSize(12)
    pdf.setTextColor(100, 100, 100)
    pdf.text('Request for Taxpayer Identification Number and Certification', 105, 35, { align: 'center' })
    
    // Add a line
    pdf.setDrawColor(200, 200, 200)
    pdf.line(20, 45, 190, 45)
    
    // Form content
    pdf.setFontSize(11)
    pdf.setTextColor(40, 40, 40)
    
    let yPos = 60
    const lineHeight = 8
    const labelWidth = 50
    
    // Helper function to add field
    const addField = (label: string, value: string, y: number) => {
      pdf.setFont('helvetica', 'bold')
      pdf.text(label + ':', 20, y)
      pdf.setFont('helvetica', 'normal')
      pdf.text(value || 'N/A', 20 + labelWidth, y)
      return y + lineHeight
    }
    
    // Add form fields
    yPos = addField('Legal Name', formData.legal_name, yPos)
    yPos = addField('Business Name', formData.business_name || 'N/A', yPos)
    yPos = addField('Tax Classification', formData.tax_classification, yPos)
    yPos = addField('SSN/EIN', formData.ssn_ein, yPos)
    
    yPos += 5 // Extra space
    
    // Address section
    pdf.setFont('helvetica', 'bold')
    pdf.text('Address:', 20, yPos)
    yPos += lineHeight
    
    pdf.setFont('helvetica', 'normal')
    pdf.text(formData.street_address, 20, yPos)
    if (formData.apartment) {
      pdf.text(`Apt: ${formData.apartment}`, 120, yPos)
    }
    yPos += lineHeight
    
    pdf.text(`${formData.city}, ${formData.state} ${formData.zip_code}`, 20, yPos)
    yPos += lineHeight * 2
    
    // Signature section
    pdf.setFont('helvetica', 'bold')
    pdf.text('Signature:', 20, yPos)
    yPos += lineHeight
    
    pdf.setFont('helvetica', 'normal')
    if (formData.signature_type === 'typed') {
      pdf.text(`Typed Signature: ${formData.signature}`, 20, yPos)
    } else {
      pdf.text('Digital Signature: [Signature on file]', 20, yPos)
    }
    yPos += lineHeight
    
    // Submission info
    yPos += 10
    pdf.setDrawColor(200, 200, 200)
    pdf.line(20, yPos, 190, yPos)
    yPos += 10
    
    pdf.setFontSize(9)
    pdf.setTextColor(100, 100, 100)
    pdf.text(`Submitted: ${new Date(formData.submitted_at).toLocaleDateString()}`, 20, yPos)
    pdf.text(`Request ID: ${requestId}`, 20, yPos + 6)
    
    // Footer
    pdf.setFontSize(8)
    pdf.text('Generated by TaxForms Pro', 105, 280, { align: 'center' })
    
    // Generate PDF buffer
    const pdfBuffer = pdf.output('arraybuffer')
    
    // Create filename
    const filename = `W9_${formData.legal_name.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`
    
    // Return PDF as download
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': pdfBuffer.byteLength.toString(),
      },
    })

  } catch (error) {
    console.error('Error generating PDF:', error)
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    )
  }
}
